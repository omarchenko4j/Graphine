package io.graphine.processor.code.generator.repository.method;

import com.squareup.javapoet.CodeBlock;
import io.graphine.processor.code.renderer.parameter.index_provider.NumericParameterIndexProvider;
import io.graphine.processor.code.renderer.parameter.index_provider.ParameterIndexProvider;
import io.graphine.processor.metadata.model.entity.EntityMetadata;
import io.graphine.processor.metadata.model.entity.attribute.AttributeMetadata;
import io.graphine.processor.metadata.model.entity.attribute.IdentifierMetadata;
import io.graphine.processor.metadata.model.repository.method.MethodMetadata;
import io.graphine.processor.metadata.model.repository.method.name.QueryableMethodName;
import io.graphine.processor.metadata.model.repository.method.name.fragment.QualifierFragment;
import io.graphine.processor.metadata.model.repository.method.parameter.ParameterMetadata;
import io.graphine.processor.query.model.NativeQuery;

import javax.lang.model.element.TypeElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.TypeMirror;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Collection;
import java.util.Iterator;

import static io.graphine.processor.metadata.model.repository.method.name.fragment.QualifierFragment.MethodForm.PLURAL;
import static io.graphine.processor.util.AccessorUtils.getter;
import static io.graphine.processor.util.AccessorUtils.setter;
import static io.graphine.processor.util.StringUtils.uncapitalize;
import static io.graphine.processor.util.VariableNameUniqueizer.uniqueize;

/**
 * @author Oleg Marchenko
 */
public final class RepositorySaveMethodImplementationGenerator extends RepositoryMethodImplementationGenerator {
    public static final String ITERATOR_VARIABLE_NAME = uniqueize("iterator");

    @Override
    protected CodeBlock renderQuery(MethodMetadata method, NativeQuery query) {
        return CodeBlock.builder()
                        .addStatement("String $L = $S", QUERY_VARIABLE_NAME, query.getValue())
                        .build();
    }

    @Override
    protected CodeBlock renderStatement(MethodMetadata method, NativeQuery query, EntityMetadata entity) {
        CodeBlock.Builder builder = CodeBlock.builder();

        if (!entity.getIdentifier().isAutogenerated()) {
            builder.beginControlFlow("try ($T $L = $L.prepareStatement($L))",
                                     PreparedStatement.class,
                                     STATEMENT_VARIABLE_NAME,
                                     CONNECTION_VARIABLE_NAME,
                                     QUERY_VARIABLE_NAME);
        }
        else {
            builder.beginControlFlow("try ($T $L = $L.prepareStatement($L, $T.RETURN_GENERATED_KEYS))",
                                     PreparedStatement.class,
                                     STATEMENT_VARIABLE_NAME,
                                     CONNECTION_VARIABLE_NAME,
                                     QUERY_VARIABLE_NAME,
                                     Statement.class);
        }

        return builder.add(renderStatementParameters(method, query, entity))
                      .add(renderResultSet(method, query, entity))
                      .endControlFlow()
                      .build();
    }

    @Override
    protected CodeBlock renderStatementParameters(MethodMetadata method, NativeQuery query, EntityMetadata entity) {
        ParameterMetadata parameter = method.getParameters().get(0);

        CodeBlock.Builder snippetBuilder = CodeBlock.builder();

        String entityVariableName;

        QueryableMethodName queryableName = method.getQueryableName();
        QualifierFragment qualifier = queryableName.getQualifier();
        if (qualifier.getMethodForm() == PLURAL) {
            entityVariableName = uniqueize(uncapitalize(entity.getName()));
            snippetBuilder
                    .beginControlFlow("for ($T $L : $L)",
                                      entity.getNativeType(), entityVariableName, parameter.getName());
        }
        else {
            entityVariableName = parameter.getName();
        }

        ParameterIndexProvider parameterIndexProvider = new NumericParameterIndexProvider();

        Collection<AttributeMetadata> attributes = entity.getAttributes(entity.getIdentifier().isAutogenerated());
        for (AttributeMetadata attribute : attributes) {
            TypeMirror attributeType = attribute.getNativeType();

            String parameterIndex = parameterIndexProvider.getParameterIndex();

            snippetBuilder.add(
                    preparedStatementMethodMappingRenderer.render(attributeType,
                                                                  parameterIndex,
                                                                  CodeBlock.of("$L.$L()",
                                                                               entityVariableName, getter(attribute)))
            );
        }

        if (qualifier.getMethodForm() == PLURAL) {
            snippetBuilder
                    .addStatement("$L.addBatch()", STATEMENT_VARIABLE_NAME)
                    .endControlFlow()
                    .addStatement("$L.executeBatch()", STATEMENT_VARIABLE_NAME);
        }
        else {
            snippetBuilder
                    .addStatement("$L.executeUpdate()", STATEMENT_VARIABLE_NAME);
        }

        return snippetBuilder.build();
    }

    @Override
    protected CodeBlock renderResultSet(MethodMetadata method, NativeQuery query, EntityMetadata entity) {
        CodeBlock.Builder builder = CodeBlock.builder();
        if (entity.getIdentifier().isAutogenerated()) {
            builder
                    .beginControlFlow("try ($T $L = $L.getGeneratedKeys())",
                                      ResultSet.class,
                                      RESULT_SET_VARIABLE_NAME,
                                      STATEMENT_VARIABLE_NAME)
                    .add(renderResultSetParameters(method, query, entity))
                    .endControlFlow();
        }
        return builder.build();
    }

    @Override
    protected CodeBlock renderResultSetParameters(MethodMetadata method, NativeQuery query, EntityMetadata entity) {
        ParameterMetadata parameter = method.getParameters().get(0);

        CodeBlock.Builder builder = CodeBlock.builder();

        IdentifierMetadata identifier = entity.getIdentifier();
        if (identifier.isAutogenerated()) {
            QueryableMethodName queryableName = method.getQueryableName();
            QualifierFragment qualifier = queryableName.getQualifier();
            if (qualifier.getMethodForm() == PLURAL) {
                String entityVariableName = uniqueize(uncapitalize(entity.getName()));

                TypeMirror parameterType = parameter.getNativeType();
                switch (parameterType.getKind()) {
                    case ARRAY:
                        builder
                                .addStatement("int i = 0")
                                .beginControlFlow("while ($L.next())", RESULT_SET_VARIABLE_NAME)
                                .addStatement("$T $L = $L[i]",
                                              entity.getNativeType(), entityVariableName, parameter.getName())
                                .addStatement("$L.$L($L)",
                                              entityVariableName,
                                              setter(identifier),
                                              resultSetMethodMappingRenderer.render(identifier.getNativeType(), "1"))
                                .addStatement("i++")
                                .endControlFlow();
                        break;
                    case DECLARED:
                        DeclaredType declaredType = (DeclaredType) parameterType;
                        TypeElement typeElement = (TypeElement) declaredType.asElement();
                        switch (typeElement.getQualifiedName().toString()) {
                            case "java.lang.Iterable":
                            case "java.util.Collection":
                            case "java.util.List":
                            case "java.util.Set":
                                builder
                                        .addStatement("$T<$T> $L = $L.iterator()",
                                                      Iterator.class,
                                                      entity.getNativeType(),
                                                      ITERATOR_VARIABLE_NAME,
                                                      parameter.getName())
                                        .beginControlFlow("while ($L.next() && $L.hasNext())",
                                                          RESULT_SET_VARIABLE_NAME, ITERATOR_VARIABLE_NAME)
                                        .addStatement("$T $L = $L.next()",
                                                      entity.getNativeType(),
                                                      entityVariableName,
                                                      ITERATOR_VARIABLE_NAME)
                                        .addStatement("$L.$L($L)",
                                                      entityVariableName,
                                                      setter(identifier),
                                                      resultSetMethodMappingRenderer.render(identifier.getNativeType(), "1"))
                                        .endControlFlow();
                                break;
                        }
                        break;
                }
            }
            else {
                builder
                        .beginControlFlow("if ($L.next())", RESULT_SET_VARIABLE_NAME)
                        .addStatement("$L.$L($L)",
                                      parameter.getName(),
                                      setter(identifier),
                                      resultSetMethodMappingRenderer.render(identifier.getNativeType(), "1"))
                        .endControlFlow();
            }
        }

        return builder.build();
    }
}
