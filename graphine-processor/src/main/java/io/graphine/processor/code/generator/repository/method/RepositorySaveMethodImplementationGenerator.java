package io.graphine.processor.code.generator.repository.method;

import com.squareup.javapoet.CodeBlock;
import io.graphine.processor.code.renderer.parameter.index_provider.NumericParameterIndexProvider;
import io.graphine.processor.code.renderer.parameter.index_provider.ParameterIndexProvider;
import io.graphine.processor.code.renderer.parameter.result_set.GeneratedKeyParameterHighLevelRenderer;
import io.graphine.processor.metadata.model.entity.EntityMetadata;
import io.graphine.processor.metadata.model.entity.attribute.AttributeMetadata;
import io.graphine.processor.metadata.model.repository.method.MethodMetadata;
import io.graphine.processor.metadata.model.repository.method.name.QueryableMethodName;
import io.graphine.processor.metadata.model.repository.method.name.fragment.QualifierFragment;
import io.graphine.processor.metadata.model.repository.method.parameter.ParameterMetadata;
import io.graphine.processor.query.model.NativeQuery;
import io.graphine.processor.query.model.parameter.Parameter;
import io.graphine.processor.util.AccessorUtils;

import javax.lang.model.type.TypeMirror;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Collection;
import java.util.List;

import static io.graphine.processor.code.renderer.parameter.result_set.GeneratedKeyParameterHighLevelRenderer.GENERATED_KEY_VARIABLE_NAME;
import static io.graphine.processor.metadata.model.repository.method.name.fragment.QualifierFragment.MethodForm.PLURAL;
import static io.graphine.processor.util.VariableNameUniqueizer.uniqueize;

/**
 * @author Oleg Marchenko
 */
public final class RepositorySaveMethodImplementationGenerator extends RepositoryMethodImplementationGenerator {
    @Override
    protected CodeBlock renderQuery(MethodMetadata method, NativeQuery query) {
        return CodeBlock.builder()
                        .addStatement("String $L = $S", QUERY_VARIABLE_NAME, query.getValue())
                        .build();
    }

    @Override
    protected CodeBlock renderStatement(MethodMetadata method, NativeQuery query, EntityMetadata entity) {
        CodeBlock.Builder builder = CodeBlock.builder();

        if (!entity.getIdentifier().isAutogenerated()) {
            builder.beginControlFlow("try ($T $L = $L.prepareStatement($L))",
                                     PreparedStatement.class,
                                     STATEMENT_VARIABLE_NAME,
                                     CONNECTION_VARIABLE_NAME,
                                     QUERY_VARIABLE_NAME);
        }
        else {
            builder.beginControlFlow("try ($T $L = $L.prepareStatement($L, $T.RETURN_GENERATED_KEYS))",
                                     PreparedStatement.class,
                                     STATEMENT_VARIABLE_NAME,
                                     CONNECTION_VARIABLE_NAME,
                                     QUERY_VARIABLE_NAME,
                                     Statement.class);
        }

        return builder.add(renderStatementParameters(method, query, entity))
                      .add(renderResultSet(method, query))
                      .endControlFlow()
                      .build();
    }

    @Override
    protected CodeBlock renderStatementParameters(MethodMetadata method, NativeQuery query, EntityMetadata entity) {
        ParameterMetadata parameter = method.getParameters().get(0);

        CodeBlock.Builder snippetBuilder = CodeBlock.builder();

        String entityVariableName;

        QueryableMethodName queryableName = method.getQueryableName();
        QualifierFragment qualifier = queryableName.getQualifier();
        if (qualifier.getMethodForm() == PLURAL) {
            entityVariableName = uniqueize("element");
            snippetBuilder
                    .beginControlFlow("for ($T $L : $L)",
                                      entity.getNativeType(), entityVariableName, parameter.getName());
        }
        else {
            entityVariableName = parameter.getName();
        }

        ParameterIndexProvider parameterIndexProvider = new NumericParameterIndexProvider();

        Collection<AttributeMetadata> attributes = entity.getAttributes(entity.getIdentifier().isAutogenerated());
        for (AttributeMetadata attribute : attributes) {
            TypeMirror attributeType = attribute.getNativeType();
            String attributeGetter = AccessorUtils.getter(attribute.getNativeElement());

            String parameterIndex = parameterIndexProvider.getParameterIndex();

            snippetBuilder.add(
                    preparedStatementMethodMappingRenderer.render(attributeType,
                                                                  parameterIndex,
                                                                  CodeBlock.of("$L.$L()",
                                                                               entityVariableName, attributeGetter))
            );
        }

        if (qualifier.getMethodForm() == PLURAL) {
            snippetBuilder
                    .addStatement("$L.addBatch()", STATEMENT_VARIABLE_NAME)
                    .endControlFlow()
                    .addStatement("$L.executeBatch()", STATEMENT_VARIABLE_NAME);
        }
        else {
            snippetBuilder
                    .addStatement("$L.executeUpdate()", STATEMENT_VARIABLE_NAME);
        }

        return snippetBuilder.build();
    }

    @Override
    protected CodeBlock renderResultSet(MethodMetadata method, NativeQuery query) {
        CodeBlock.Builder builder = CodeBlock.builder();

        List<Parameter> producedParameters = query.getProducedParameters();
        if (!producedParameters.isEmpty()) {
            builder
                    .beginControlFlow("try ($T $L = $L.getGeneratedKeys())",
                                      ResultSet.class,
                                      GENERATED_KEY_VARIABLE_NAME,
                                      STATEMENT_VARIABLE_NAME)
                    .add(renderResultSetParameters(method, query))
                    .endControlFlow();
        }

        return builder.build();
    }

    @Override
    protected CodeBlock renderResultSetParameters(MethodMetadata method, NativeQuery query) {
        CodeBlock.Builder builder = CodeBlock.builder();

        List<Parameter> producedParameters = query.getProducedParameters();
        if (!producedParameters.isEmpty()) {
            Parameter producedParameter = producedParameters.get(0);
            builder.add(producedParameter.accept(
                    new GeneratedKeyParameterHighLevelRenderer(new NumericParameterIndexProvider())
            ));
        }

        return builder.build();
    }
}
