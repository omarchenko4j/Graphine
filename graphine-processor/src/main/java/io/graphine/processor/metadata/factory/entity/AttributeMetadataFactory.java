package io.graphine.processor.metadata.factory.entity;

import io.graphine.core.annotation.Attribute;
import io.graphine.core.annotation.AttributeOverride;
import io.graphine.core.annotation.AttributeOverrides;
import io.graphine.core.annotation.Id;
import io.graphine.processor.metadata.model.entity.attribute.AttributeMetadata;
import io.graphine.processor.metadata.model.entity.attribute.EmbeddedAttribute;
import io.graphine.processor.metadata.model.entity.attribute.IdentifierMetadata;
import io.graphine.processor.support.naming.pipeline.ColumnNamingPipeline;

import javax.lang.model.element.VariableElement;
import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;

import static io.graphine.processor.metadata.model.entity.attribute.EmbeddedAttribute.isEmbedded;
import static io.graphine.processor.metadata.model.entity.attribute.IdentifierMetadata.isIdentifier;
import static io.graphine.processor.util.StringUtils.isEmpty;
import static java.util.Collections.emptyMap;
import static java.util.Collections.singletonMap;
import static java.util.Objects.nonNull;

/**
 * @author Oleg Marchenko
 */
public final class AttributeMetadataFactory {
    private final ColumnNamingPipeline columnNamingPipeline;

    public AttributeMetadataFactory(ColumnNamingPipeline columnNamingPipeline) {
        this.columnNamingPipeline = columnNamingPipeline;
    }

    public AttributeMetadata createAttribute(VariableElement fieldElement) {
        String column = getColumn(fieldElement);
        if (isIdentifier(fieldElement)) {
            Id id = fieldElement.getAnnotation(Id.class);
            return new IdentifierMetadata(fieldElement, column, id.autogenerated());
        }
        if (isEmbedded(fieldElement)) {
            Map<String, String> attributeNameToColumnNameMap = emptyMap();

            AttributeOverrides attributeOverrides =
                    fieldElement.getAnnotation(AttributeOverrides.class);
            if (nonNull(attributeOverrides)) {
                attributeNameToColumnNameMap =
                        Arrays.stream(attributeOverrides.value())
                              .collect(Collectors.toMap(AttributeOverride::name,
                                                        attributeOverride -> attributeOverride.attribute().column()));
            }
            else {
                AttributeOverride attributeOverride =
                        fieldElement.getAnnotation(AttributeOverride.class);
                if (nonNull(attributeOverride)) {
                    attributeNameToColumnNameMap = singletonMap(attributeOverride.name(),
                                                                attributeOverride.attribute().column());
                }
            }
            return new EmbeddedAttribute(fieldElement, attributeNameToColumnNameMap);
        }
        return new AttributeMetadata(fieldElement, column);
    }

    private String getColumn(VariableElement element) {
        String column = null;

        Attribute attribute = element.getAnnotation(Attribute.class);
        if (nonNull(attribute)) {
            column = attribute.column();
        }
        if (isEmpty(column)) {
            String attributeName = element.getSimpleName().toString();
            column = columnNamingPipeline.transform(attributeName);
        }
        return column;
    }
}
